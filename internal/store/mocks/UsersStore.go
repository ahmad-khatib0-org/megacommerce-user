// Code generated by mockery; DO NOT EDIT.
// github.com/vektra/mockery
// template: testify

package mocks

import (
	"github.com/ahmad-khatib0-org/megacommerce-proto/gen/go/users/v1"
	"github.com/ahmad-khatib0-org/megacommerce-user/internal/store"
	"github.com/ahmad-khatib0-org/megacommerce-user/pkg/models"
	"github.com/ahmad-khatib0-org/megacommerce-user/pkg/utils"
	mock "github.com/stretchr/testify/mock"
)

// NewMockUsersStore creates a new instance of MockUsersStore. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockUsersStore(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockUsersStore {
	mock := &MockUsersStore{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// MockUsersStore is an autogenerated mock type for the UsersStore type
type MockUsersStore struct {
	mock.Mock
}

type MockUsersStore_Expecter struct {
	mock *mock.Mock
}

func (_m *MockUsersStore) EXPECT() *MockUsersStore_Expecter {
	return &MockUsersStore_Expecter{mock: &_m.Mock}
}

// MarkEmailAsConfirmed provides a mock function for the type MockUsersStore
func (_mock *MockUsersStore) MarkEmailAsConfirmed(ctx *models.Context, tokenID string) *store.DBError {
	ret := _mock.Called(ctx, tokenID)

	if len(ret) == 0 {
		panic("no return value specified for MarkEmailAsConfirmed")
	}

	var r0 *store.DBError
	if returnFunc, ok := ret.Get(0).(func(*models.Context, string) *store.DBError); ok {
		r0 = returnFunc(ctx, tokenID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*store.DBError)
		}
	}
	return r0
}

// MockUsersStore_MarkEmailAsConfirmed_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'MarkEmailAsConfirmed'
type MockUsersStore_MarkEmailAsConfirmed_Call struct {
	*mock.Call
}

// MarkEmailAsConfirmed is a helper method to define mock.On call
//   - ctx *models.Context
//   - tokenID string
func (_e *MockUsersStore_Expecter) MarkEmailAsConfirmed(ctx interface{}, tokenID interface{}) *MockUsersStore_MarkEmailAsConfirmed_Call {
	return &MockUsersStore_MarkEmailAsConfirmed_Call{Call: _e.mock.On("MarkEmailAsConfirmed", ctx, tokenID)}
}

func (_c *MockUsersStore_MarkEmailAsConfirmed_Call) Run(run func(ctx *models.Context, tokenID string)) *MockUsersStore_MarkEmailAsConfirmed_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 *models.Context
		if args[0] != nil {
			arg0 = args[0].(*models.Context)
		}
		var arg1 string
		if args[1] != nil {
			arg1 = args[1].(string)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockUsersStore_MarkEmailAsConfirmed_Call) Return(dBError *store.DBError) *MockUsersStore_MarkEmailAsConfirmed_Call {
	_c.Call.Return(dBError)
	return _c
}

func (_c *MockUsersStore_MarkEmailAsConfirmed_Call) RunAndReturn(run func(ctx *models.Context, tokenID string) *store.DBError) *MockUsersStore_MarkEmailAsConfirmed_Call {
	_c.Call.Return(run)
	return _c
}

// SignupSupplier provides a mock function for the type MockUsersStore
func (_mock *MockUsersStore) SignupSupplier(ctx *models.Context, s *v1.User, token *utils.Token) *store.DBError {
	ret := _mock.Called(ctx, s, token)

	if len(ret) == 0 {
		panic("no return value specified for SignupSupplier")
	}

	var r0 *store.DBError
	if returnFunc, ok := ret.Get(0).(func(*models.Context, *v1.User, *utils.Token) *store.DBError); ok {
		r0 = returnFunc(ctx, s, token)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*store.DBError)
		}
	}
	return r0
}

// MockUsersStore_SignupSupplier_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SignupSupplier'
type MockUsersStore_SignupSupplier_Call struct {
	*mock.Call
}

// SignupSupplier is a helper method to define mock.On call
//   - ctx *models.Context
//   - s *v1.User
//   - token *utils.Token
func (_e *MockUsersStore_Expecter) SignupSupplier(ctx interface{}, s interface{}, token interface{}) *MockUsersStore_SignupSupplier_Call {
	return &MockUsersStore_SignupSupplier_Call{Call: _e.mock.On("SignupSupplier", ctx, s, token)}
}

func (_c *MockUsersStore_SignupSupplier_Call) Run(run func(ctx *models.Context, s *v1.User, token *utils.Token)) *MockUsersStore_SignupSupplier_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 *models.Context
		if args[0] != nil {
			arg0 = args[0].(*models.Context)
		}
		var arg1 *v1.User
		if args[1] != nil {
			arg1 = args[1].(*v1.User)
		}
		var arg2 *utils.Token
		if args[2] != nil {
			arg2 = args[2].(*utils.Token)
		}
		run(
			arg0,
			arg1,
			arg2,
		)
	})
	return _c
}

func (_c *MockUsersStore_SignupSupplier_Call) Return(dBError *store.DBError) *MockUsersStore_SignupSupplier_Call {
	_c.Call.Return(dBError)
	return _c
}

func (_c *MockUsersStore_SignupSupplier_Call) RunAndReturn(run func(ctx *models.Context, s *v1.User, token *utils.Token) *store.DBError) *MockUsersStore_SignupSupplier_Call {
	_c.Call.Return(run)
	return _c
}

// TokensAdd provides a mock function for the type MockUsersStore
func (_mock *MockUsersStore) TokensAdd(ctx *models.Context, userID string, token *utils.Token, tokenType models.TokenType, path string) *store.DBError {
	ret := _mock.Called(ctx, userID, token, tokenType, path)

	if len(ret) == 0 {
		panic("no return value specified for TokensAdd")
	}

	var r0 *store.DBError
	if returnFunc, ok := ret.Get(0).(func(*models.Context, string, *utils.Token, models.TokenType, string) *store.DBError); ok {
		r0 = returnFunc(ctx, userID, token, tokenType, path)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*store.DBError)
		}
	}
	return r0
}

// MockUsersStore_TokensAdd_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'TokensAdd'
type MockUsersStore_TokensAdd_Call struct {
	*mock.Call
}

// TokensAdd is a helper method to define mock.On call
//   - ctx *models.Context
//   - userID string
//   - token *utils.Token
//   - tokenType models.TokenType
//   - path string
func (_e *MockUsersStore_Expecter) TokensAdd(ctx interface{}, userID interface{}, token interface{}, tokenType interface{}, path interface{}) *MockUsersStore_TokensAdd_Call {
	return &MockUsersStore_TokensAdd_Call{Call: _e.mock.On("TokensAdd", ctx, userID, token, tokenType, path)}
}

func (_c *MockUsersStore_TokensAdd_Call) Run(run func(ctx *models.Context, userID string, token *utils.Token, tokenType models.TokenType, path string)) *MockUsersStore_TokensAdd_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 *models.Context
		if args[0] != nil {
			arg0 = args[0].(*models.Context)
		}
		var arg1 string
		if args[1] != nil {
			arg1 = args[1].(string)
		}
		var arg2 *utils.Token
		if args[2] != nil {
			arg2 = args[2].(*utils.Token)
		}
		var arg3 models.TokenType
		if args[3] != nil {
			arg3 = args[3].(models.TokenType)
		}
		var arg4 string
		if args[4] != nil {
			arg4 = args[4].(string)
		}
		run(
			arg0,
			arg1,
			arg2,
			arg3,
			arg4,
		)
	})
	return _c
}

func (_c *MockUsersStore_TokensAdd_Call) Return(dBError *store.DBError) *MockUsersStore_TokensAdd_Call {
	_c.Call.Return(dBError)
	return _c
}

func (_c *MockUsersStore_TokensAdd_Call) RunAndReturn(run func(ctx *models.Context, userID string, token *utils.Token, tokenType models.TokenType, path string) *store.DBError) *MockUsersStore_TokensAdd_Call {
	_c.Call.Return(run)
	return _c
}

// TokensDeleteAllPasswordResetByUserID provides a mock function for the type MockUsersStore
func (_mock *MockUsersStore) TokensDeleteAllPasswordResetByUserID(ctx *models.Context, userID string) (int64, *store.DBError) {
	ret := _mock.Called(ctx, userID)

	if len(ret) == 0 {
		panic("no return value specified for TokensDeleteAllPasswordResetByUserID")
	}

	var r0 int64
	var r1 *store.DBError
	if returnFunc, ok := ret.Get(0).(func(*models.Context, string) (int64, *store.DBError)); ok {
		return returnFunc(ctx, userID)
	}
	if returnFunc, ok := ret.Get(0).(func(*models.Context, string) int64); ok {
		r0 = returnFunc(ctx, userID)
	} else {
		r0 = ret.Get(0).(int64)
	}
	if returnFunc, ok := ret.Get(1).(func(*models.Context, string) *store.DBError); ok {
		r1 = returnFunc(ctx, userID)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*store.DBError)
		}
	}
	return r0, r1
}

// MockUsersStore_TokensDeleteAllPasswordResetByUserID_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'TokensDeleteAllPasswordResetByUserID'
type MockUsersStore_TokensDeleteAllPasswordResetByUserID_Call struct {
	*mock.Call
}

// TokensDeleteAllPasswordResetByUserID is a helper method to define mock.On call
//   - ctx *models.Context
//   - userID string
func (_e *MockUsersStore_Expecter) TokensDeleteAllPasswordResetByUserID(ctx interface{}, userID interface{}) *MockUsersStore_TokensDeleteAllPasswordResetByUserID_Call {
	return &MockUsersStore_TokensDeleteAllPasswordResetByUserID_Call{Call: _e.mock.On("TokensDeleteAllPasswordResetByUserID", ctx, userID)}
}

func (_c *MockUsersStore_TokensDeleteAllPasswordResetByUserID_Call) Run(run func(ctx *models.Context, userID string)) *MockUsersStore_TokensDeleteAllPasswordResetByUserID_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 *models.Context
		if args[0] != nil {
			arg0 = args[0].(*models.Context)
		}
		var arg1 string
		if args[1] != nil {
			arg1 = args[1].(string)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockUsersStore_TokensDeleteAllPasswordResetByUserID_Call) Return(n int64, dBError *store.DBError) *MockUsersStore_TokensDeleteAllPasswordResetByUserID_Call {
	_c.Call.Return(n, dBError)
	return _c
}

func (_c *MockUsersStore_TokensDeleteAllPasswordResetByUserID_Call) RunAndReturn(run func(ctx *models.Context, userID string) (int64, *store.DBError)) *MockUsersStore_TokensDeleteAllPasswordResetByUserID_Call {
	_c.Call.Return(run)
	return _c
}

// TokensGet provides a mock function for the type MockUsersStore
func (_mock *MockUsersStore) TokensGet(ctx *models.Context, tokenID string) (*v1.Token, *store.DBError) {
	ret := _mock.Called(ctx, tokenID)

	if len(ret) == 0 {
		panic("no return value specified for TokensGet")
	}

	var r0 *v1.Token
	var r1 *store.DBError
	if returnFunc, ok := ret.Get(0).(func(*models.Context, string) (*v1.Token, *store.DBError)); ok {
		return returnFunc(ctx, tokenID)
	}
	if returnFunc, ok := ret.Get(0).(func(*models.Context, string) *v1.Token); ok {
		r0 = returnFunc(ctx, tokenID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*v1.Token)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(*models.Context, string) *store.DBError); ok {
		r1 = returnFunc(ctx, tokenID)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*store.DBError)
		}
	}
	return r0, r1
}

// MockUsersStore_TokensGet_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'TokensGet'
type MockUsersStore_TokensGet_Call struct {
	*mock.Call
}

// TokensGet is a helper method to define mock.On call
//   - ctx *models.Context
//   - tokenID string
func (_e *MockUsersStore_Expecter) TokensGet(ctx interface{}, tokenID interface{}) *MockUsersStore_TokensGet_Call {
	return &MockUsersStore_TokensGet_Call{Call: _e.mock.On("TokensGet", ctx, tokenID)}
}

func (_c *MockUsersStore_TokensGet_Call) Run(run func(ctx *models.Context, tokenID string)) *MockUsersStore_TokensGet_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 *models.Context
		if args[0] != nil {
			arg0 = args[0].(*models.Context)
		}
		var arg1 string
		if args[1] != nil {
			arg1 = args[1].(string)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockUsersStore_TokensGet_Call) Return(token *v1.Token, dBError *store.DBError) *MockUsersStore_TokensGet_Call {
	_c.Call.Return(token, dBError)
	return _c
}

func (_c *MockUsersStore_TokensGet_Call) RunAndReturn(run func(ctx *models.Context, tokenID string) (*v1.Token, *store.DBError)) *MockUsersStore_TokensGet_Call {
	_c.Call.Return(run)
	return _c
}

// TokensGetAllByUserID provides a mock function for the type MockUsersStore
func (_mock *MockUsersStore) TokensGetAllByUserID(ctx *models.Context, userID string) ([]*v1.Token, *store.DBError) {
	ret := _mock.Called(ctx, userID)

	if len(ret) == 0 {
		panic("no return value specified for TokensGetAllByUserID")
	}

	var r0 []*v1.Token
	var r1 *store.DBError
	if returnFunc, ok := ret.Get(0).(func(*models.Context, string) ([]*v1.Token, *store.DBError)); ok {
		return returnFunc(ctx, userID)
	}
	if returnFunc, ok := ret.Get(0).(func(*models.Context, string) []*v1.Token); ok {
		r0 = returnFunc(ctx, userID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*v1.Token)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(*models.Context, string) *store.DBError); ok {
		r1 = returnFunc(ctx, userID)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*store.DBError)
		}
	}
	return r0, r1
}

// MockUsersStore_TokensGetAllByUserID_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'TokensGetAllByUserID'
type MockUsersStore_TokensGetAllByUserID_Call struct {
	*mock.Call
}

// TokensGetAllByUserID is a helper method to define mock.On call
//   - ctx *models.Context
//   - userID string
func (_e *MockUsersStore_Expecter) TokensGetAllByUserID(ctx interface{}, userID interface{}) *MockUsersStore_TokensGetAllByUserID_Call {
	return &MockUsersStore_TokensGetAllByUserID_Call{Call: _e.mock.On("TokensGetAllByUserID", ctx, userID)}
}

func (_c *MockUsersStore_TokensGetAllByUserID_Call) Run(run func(ctx *models.Context, userID string)) *MockUsersStore_TokensGetAllByUserID_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 *models.Context
		if args[0] != nil {
			arg0 = args[0].(*models.Context)
		}
		var arg1 string
		if args[1] != nil {
			arg1 = args[1].(string)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockUsersStore_TokensGetAllByUserID_Call) Return(tokens []*v1.Token, dBError *store.DBError) *MockUsersStore_TokensGetAllByUserID_Call {
	_c.Call.Return(tokens, dBError)
	return _c
}

func (_c *MockUsersStore_TokensGetAllByUserID_Call) RunAndReturn(run func(ctx *models.Context, userID string) ([]*v1.Token, *store.DBError)) *MockUsersStore_TokensGetAllByUserID_Call {
	_c.Call.Return(run)
	return _c
}

// UsersGetByEmail provides a mock function for the type MockUsersStore
func (_mock *MockUsersStore) UsersGetByEmail(ctx *models.Context, email string) (*v1.User, *store.DBError) {
	ret := _mock.Called(ctx, email)

	if len(ret) == 0 {
		panic("no return value specified for UsersGetByEmail")
	}

	var r0 *v1.User
	var r1 *store.DBError
	if returnFunc, ok := ret.Get(0).(func(*models.Context, string) (*v1.User, *store.DBError)); ok {
		return returnFunc(ctx, email)
	}
	if returnFunc, ok := ret.Get(0).(func(*models.Context, string) *v1.User); ok {
		r0 = returnFunc(ctx, email)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*v1.User)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(*models.Context, string) *store.DBError); ok {
		r1 = returnFunc(ctx, email)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*store.DBError)
		}
	}
	return r0, r1
}

// MockUsersStore_UsersGetByEmail_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UsersGetByEmail'
type MockUsersStore_UsersGetByEmail_Call struct {
	*mock.Call
}

// UsersGetByEmail is a helper method to define mock.On call
//   - ctx *models.Context
//   - email string
func (_e *MockUsersStore_Expecter) UsersGetByEmail(ctx interface{}, email interface{}) *MockUsersStore_UsersGetByEmail_Call {
	return &MockUsersStore_UsersGetByEmail_Call{Call: _e.mock.On("UsersGetByEmail", ctx, email)}
}

func (_c *MockUsersStore_UsersGetByEmail_Call) Run(run func(ctx *models.Context, email string)) *MockUsersStore_UsersGetByEmail_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 *models.Context
		if args[0] != nil {
			arg0 = args[0].(*models.Context)
		}
		var arg1 string
		if args[1] != nil {
			arg1 = args[1].(string)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockUsersStore_UsersGetByEmail_Call) Return(user *v1.User, dBError *store.DBError) *MockUsersStore_UsersGetByEmail_Call {
	_c.Call.Return(user, dBError)
	return _c
}

func (_c *MockUsersStore_UsersGetByEmail_Call) RunAndReturn(run func(ctx *models.Context, email string) (*v1.User, *store.DBError)) *MockUsersStore_UsersGetByEmail_Call {
	_c.Call.Return(run)
	return _c
}
