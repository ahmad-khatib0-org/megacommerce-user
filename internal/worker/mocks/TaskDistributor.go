// Code generated by mockery; DO NOT EDIT.
// github.com/vektra/mockery
// template: testify

package mocks

import (
	"context"

	"github.com/ahmad-khatib0-org/megacommerce-user/pkg/models"
	"github.com/hibiken/asynq"
	mock "github.com/stretchr/testify/mock"
)

// NewMockTaskDistributor creates a new instance of MockTaskDistributor. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockTaskDistributor(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockTaskDistributor {
	mock := &MockTaskDistributor{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// MockTaskDistributor is an autogenerated mock type for the TaskDistributor type
type MockTaskDistributor struct {
	mock.Mock
}

type MockTaskDistributor_Expecter struct {
	mock *mock.Mock
}

func (_m *MockTaskDistributor) EXPECT() *MockTaskDistributor_Expecter {
	return &MockTaskDistributor_Expecter{mock: &_m.Mock}
}

// SendPasswordResetEmail provides a mock function for the type MockTaskDistributor
func (_mock *MockTaskDistributor) SendPasswordResetEmail(ctx context.Context, pay *models.TaskSendPasswordResetEmailPayload, opts ...asynq.Option) *models.AppError {
	var tmpRet mock.Arguments
	if len(opts) > 0 {
		tmpRet = _mock.Called(ctx, pay, opts)
	} else {
		tmpRet = _mock.Called(ctx, pay)
	}
	ret := tmpRet

	if len(ret) == 0 {
		panic("no return value specified for SendPasswordResetEmail")
	}

	var r0 *models.AppError
	if returnFunc, ok := ret.Get(0).(func(context.Context, *models.TaskSendPasswordResetEmailPayload, ...asynq.Option) *models.AppError); ok {
		r0 = returnFunc(ctx, pay, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.AppError)
		}
	}
	return r0
}

// MockTaskDistributor_SendPasswordResetEmail_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SendPasswordResetEmail'
type MockTaskDistributor_SendPasswordResetEmail_Call struct {
	*mock.Call
}

// SendPasswordResetEmail is a helper method to define mock.On call
//   - ctx context.Context
//   - pay *models.TaskSendPasswordResetEmailPayload
//   - opts ...asynq.Option
func (_e *MockTaskDistributor_Expecter) SendPasswordResetEmail(ctx interface{}, pay interface{}, opts ...interface{}) *MockTaskDistributor_SendPasswordResetEmail_Call {
	return &MockTaskDistributor_SendPasswordResetEmail_Call{Call: _e.mock.On("SendPasswordResetEmail",
		append([]interface{}{ctx, pay}, opts...)...)}
}

func (_c *MockTaskDistributor_SendPasswordResetEmail_Call) Run(run func(ctx context.Context, pay *models.TaskSendPasswordResetEmailPayload, opts ...asynq.Option)) *MockTaskDistributor_SendPasswordResetEmail_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 *models.TaskSendPasswordResetEmailPayload
		if args[1] != nil {
			arg1 = args[1].(*models.TaskSendPasswordResetEmailPayload)
		}
		var arg2 []asynq.Option
		var variadicArgs []asynq.Option
		if len(args) > 2 {
			variadicArgs = args[2].([]asynq.Option)
		}
		arg2 = variadicArgs
		run(
			arg0,
			arg1,
			arg2...,
		)
	})
	return _c
}

func (_c *MockTaskDistributor_SendPasswordResetEmail_Call) Return(appError *models.AppError) *MockTaskDistributor_SendPasswordResetEmail_Call {
	_c.Call.Return(appError)
	return _c
}

func (_c *MockTaskDistributor_SendPasswordResetEmail_Call) RunAndReturn(run func(ctx context.Context, pay *models.TaskSendPasswordResetEmailPayload, opts ...asynq.Option) *models.AppError) *MockTaskDistributor_SendPasswordResetEmail_Call {
	_c.Call.Return(run)
	return _c
}

// SendVerifyEmail provides a mock function for the type MockTaskDistributor
func (_mock *MockTaskDistributor) SendVerifyEmail(ctx context.Context, pay *models.TaskSendVerifyEmailPayload, opts ...asynq.Option) *models.AppError {
	var tmpRet mock.Arguments
	if len(opts) > 0 {
		tmpRet = _mock.Called(ctx, pay, opts)
	} else {
		tmpRet = _mock.Called(ctx, pay)
	}
	ret := tmpRet

	if len(ret) == 0 {
		panic("no return value specified for SendVerifyEmail")
	}

	var r0 *models.AppError
	if returnFunc, ok := ret.Get(0).(func(context.Context, *models.TaskSendVerifyEmailPayload, ...asynq.Option) *models.AppError); ok {
		r0 = returnFunc(ctx, pay, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.AppError)
		}
	}
	return r0
}

// MockTaskDistributor_SendVerifyEmail_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SendVerifyEmail'
type MockTaskDistributor_SendVerifyEmail_Call struct {
	*mock.Call
}

// SendVerifyEmail is a helper method to define mock.On call
//   - ctx context.Context
//   - pay *models.TaskSendVerifyEmailPayload
//   - opts ...asynq.Option
func (_e *MockTaskDistributor_Expecter) SendVerifyEmail(ctx interface{}, pay interface{}, opts ...interface{}) *MockTaskDistributor_SendVerifyEmail_Call {
	return &MockTaskDistributor_SendVerifyEmail_Call{Call: _e.mock.On("SendVerifyEmail",
		append([]interface{}{ctx, pay}, opts...)...)}
}

func (_c *MockTaskDistributor_SendVerifyEmail_Call) Run(run func(ctx context.Context, pay *models.TaskSendVerifyEmailPayload, opts ...asynq.Option)) *MockTaskDistributor_SendVerifyEmail_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 *models.TaskSendVerifyEmailPayload
		if args[1] != nil {
			arg1 = args[1].(*models.TaskSendVerifyEmailPayload)
		}
		var arg2 []asynq.Option
		var variadicArgs []asynq.Option
		if len(args) > 2 {
			variadicArgs = args[2].([]asynq.Option)
		}
		arg2 = variadicArgs
		run(
			arg0,
			arg1,
			arg2...,
		)
	})
	return _c
}

func (_c *MockTaskDistributor_SendVerifyEmail_Call) Return(appError *models.AppError) *MockTaskDistributor_SendVerifyEmail_Call {
	_c.Call.Return(appError)
	return _c
}

func (_c *MockTaskDistributor_SendVerifyEmail_Call) RunAndReturn(run func(ctx context.Context, pay *models.TaskSendVerifyEmailPayload, opts ...asynq.Option) *models.AppError) *MockTaskDistributor_SendVerifyEmail_Call {
	_c.Call.Return(run)
	return _c
}
