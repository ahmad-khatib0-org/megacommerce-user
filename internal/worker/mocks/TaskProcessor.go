// Code generated by mockery; DO NOT EDIT.
// github.com/vektra/mockery
// template: testify

package mocks

import (
	"context"

	"github.com/hibiken/asynq"
	mock "github.com/stretchr/testify/mock"
)

// NewMockTaskProcessor creates a new instance of MockTaskProcessor. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockTaskProcessor(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockTaskProcessor {
	mock := &MockTaskProcessor{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// MockTaskProcessor is an autogenerated mock type for the TaskProcessor type
type MockTaskProcessor struct {
	mock.Mock
}

type MockTaskProcessor_Expecter struct {
	mock *mock.Mock
}

func (_m *MockTaskProcessor) EXPECT() *MockTaskProcessor_Expecter {
	return &MockTaskProcessor_Expecter{mock: &_m.Mock}
}

// ProcessSendVerifyEmail provides a mock function for the type MockTaskProcessor
func (_mock *MockTaskProcessor) ProcessSendVerifyEmail(ctx context.Context, task *asynq.Task) error {
	ret := _mock.Called(ctx, task)

	if len(ret) == 0 {
		panic("no return value specified for ProcessSendVerifyEmail")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, *asynq.Task) error); ok {
		r0 = returnFunc(ctx, task)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockTaskProcessor_ProcessSendVerifyEmail_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ProcessSendVerifyEmail'
type MockTaskProcessor_ProcessSendVerifyEmail_Call struct {
	*mock.Call
}

// ProcessSendVerifyEmail is a helper method to define mock.On call
//   - ctx context.Context
//   - task *asynq.Task
func (_e *MockTaskProcessor_Expecter) ProcessSendVerifyEmail(ctx interface{}, task interface{}) *MockTaskProcessor_ProcessSendVerifyEmail_Call {
	return &MockTaskProcessor_ProcessSendVerifyEmail_Call{Call: _e.mock.On("ProcessSendVerifyEmail", ctx, task)}
}

func (_c *MockTaskProcessor_ProcessSendVerifyEmail_Call) Run(run func(ctx context.Context, task *asynq.Task)) *MockTaskProcessor_ProcessSendVerifyEmail_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 *asynq.Task
		if args[1] != nil {
			arg1 = args[1].(*asynq.Task)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockTaskProcessor_ProcessSendVerifyEmail_Call) Return(err error) *MockTaskProcessor_ProcessSendVerifyEmail_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockTaskProcessor_ProcessSendVerifyEmail_Call) RunAndReturn(run func(ctx context.Context, task *asynq.Task) error) *MockTaskProcessor_ProcessSendVerifyEmail_Call {
	_c.Call.Return(run)
	return _c
}

// Start provides a mock function for the type MockTaskProcessor
func (_mock *MockTaskProcessor) Start() error {
	ret := _mock.Called()

	if len(ret) == 0 {
		panic("no return value specified for Start")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func() error); ok {
		r0 = returnFunc()
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockTaskProcessor_Start_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Start'
type MockTaskProcessor_Start_Call struct {
	*mock.Call
}

// Start is a helper method to define mock.On call
func (_e *MockTaskProcessor_Expecter) Start() *MockTaskProcessor_Start_Call {
	return &MockTaskProcessor_Start_Call{Call: _e.mock.On("Start")}
}

func (_c *MockTaskProcessor_Start_Call) Run(run func()) *MockTaskProcessor_Start_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockTaskProcessor_Start_Call) Return(err error) *MockTaskProcessor_Start_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockTaskProcessor_Start_Call) RunAndReturn(run func() error) *MockTaskProcessor_Start_Call {
	_c.Call.Return(run)
	return _c
}
