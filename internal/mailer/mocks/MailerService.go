// Code generated by mockery; DO NOT EDIT.
// github.com/vektra/mockery
// template: testify

package mocks

import (
	mock "github.com/stretchr/testify/mock"
	"github.com/throttled/throttled/v2"
)

// NewMockMailerService creates a new instance of MockMailerService. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockMailerService(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockMailerService {
	mock := &MockMailerService{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// MockMailerService is an autogenerated mock type for the MailerService type
type MockMailerService struct {
	mock.Mock
}

type MockMailerService_Expecter struct {
	mock *mock.Mock
}

func (_m *MockMailerService) EXPECT() *MockMailerService_Expecter {
	return &MockMailerService_Expecter{mock: &_m.Mock}
}

// GetPerDayEmailRateLimiter provides a mock function for the type MockMailerService
func (_mock *MockMailerService) GetPerDayEmailRateLimiter() *throttled.GCRARateLimiterCtx {
	ret := _mock.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetPerDayEmailRateLimiter")
	}

	var r0 *throttled.GCRARateLimiterCtx
	if returnFunc, ok := ret.Get(0).(func() *throttled.GCRARateLimiterCtx); ok {
		r0 = returnFunc()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*throttled.GCRARateLimiterCtx)
		}
	}
	return r0
}

// MockMailerService_GetPerDayEmailRateLimiter_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetPerDayEmailRateLimiter'
type MockMailerService_GetPerDayEmailRateLimiter_Call struct {
	*mock.Call
}

// GetPerDayEmailRateLimiter is a helper method to define mock.On call
func (_e *MockMailerService_Expecter) GetPerDayEmailRateLimiter() *MockMailerService_GetPerDayEmailRateLimiter_Call {
	return &MockMailerService_GetPerDayEmailRateLimiter_Call{Call: _e.mock.On("GetPerDayEmailRateLimiter")}
}

func (_c *MockMailerService_GetPerDayEmailRateLimiter_Call) Run(run func()) *MockMailerService_GetPerDayEmailRateLimiter_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockMailerService_GetPerDayEmailRateLimiter_Call) Return(gCRARateLimiterCtx *throttled.GCRARateLimiterCtx) *MockMailerService_GetPerDayEmailRateLimiter_Call {
	_c.Call.Return(gCRARateLimiterCtx)
	return _c
}

func (_c *MockMailerService_GetPerDayEmailRateLimiter_Call) RunAndReturn(run func() *throttled.GCRARateLimiterCtx) *MockMailerService_GetPerDayEmailRateLimiter_Call {
	_c.Call.Return(run)
	return _c
}

// GetPerHourEmailRateLimiter provides a mock function for the type MockMailerService
func (_mock *MockMailerService) GetPerHourEmailRateLimiter() *throttled.GCRARateLimiterCtx {
	ret := _mock.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetPerHourEmailRateLimiter")
	}

	var r0 *throttled.GCRARateLimiterCtx
	if returnFunc, ok := ret.Get(0).(func() *throttled.GCRARateLimiterCtx); ok {
		r0 = returnFunc()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*throttled.GCRARateLimiterCtx)
		}
	}
	return r0
}

// MockMailerService_GetPerHourEmailRateLimiter_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetPerHourEmailRateLimiter'
type MockMailerService_GetPerHourEmailRateLimiter_Call struct {
	*mock.Call
}

// GetPerHourEmailRateLimiter is a helper method to define mock.On call
func (_e *MockMailerService_Expecter) GetPerHourEmailRateLimiter() *MockMailerService_GetPerHourEmailRateLimiter_Call {
	return &MockMailerService_GetPerHourEmailRateLimiter_Call{Call: _e.mock.On("GetPerHourEmailRateLimiter")}
}

func (_c *MockMailerService_GetPerHourEmailRateLimiter_Call) Run(run func()) *MockMailerService_GetPerHourEmailRateLimiter_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockMailerService_GetPerHourEmailRateLimiter_Call) Return(gCRARateLimiterCtx *throttled.GCRARateLimiterCtx) *MockMailerService_GetPerHourEmailRateLimiter_Call {
	_c.Call.Return(gCRARateLimiterCtx)
	return _c
}

func (_c *MockMailerService_GetPerHourEmailRateLimiter_Call) RunAndReturn(run func() *throttled.GCRARateLimiterCtx) *MockMailerService_GetPerHourEmailRateLimiter_Call {
	_c.Call.Return(run)
	return _c
}

// InitEmailBatching provides a mock function for the type MockMailerService
func (_mock *MockMailerService) InitEmailBatching() {
	_mock.Called()
	return
}

// MockMailerService_InitEmailBatching_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'InitEmailBatching'
type MockMailerService_InitEmailBatching_Call struct {
	*mock.Call
}

// InitEmailBatching is a helper method to define mock.On call
func (_e *MockMailerService_Expecter) InitEmailBatching() *MockMailerService_InitEmailBatching_Call {
	return &MockMailerService_InitEmailBatching_Call{Call: _e.mock.On("InitEmailBatching")}
}

func (_c *MockMailerService_InitEmailBatching_Call) Run(run func()) *MockMailerService_InitEmailBatching_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockMailerService_InitEmailBatching_Call) Return() *MockMailerService_InitEmailBatching_Call {
	_c.Call.Return()
	return _c
}

func (_c *MockMailerService_InitEmailBatching_Call) RunAndReturn(run func()) *MockMailerService_InitEmailBatching_Call {
	_c.Run(run)
	return _c
}

// SendVerifyEmail provides a mock function for the type MockMailerService
func (_mock *MockMailerService) SendVerifyEmail(lang string, email string, token string, hours int) error {
	ret := _mock.Called(lang, email, token, hours)

	if len(ret) == 0 {
		panic("no return value specified for SendVerifyEmail")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(string, string, string, int) error); ok {
		r0 = returnFunc(lang, email, token, hours)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockMailerService_SendVerifyEmail_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SendVerifyEmail'
type MockMailerService_SendVerifyEmail_Call struct {
	*mock.Call
}

// SendVerifyEmail is a helper method to define mock.On call
//   - lang string
//   - email string
//   - token string
//   - hours int
func (_e *MockMailerService_Expecter) SendVerifyEmail(lang interface{}, email interface{}, token interface{}, hours interface{}) *MockMailerService_SendVerifyEmail_Call {
	return &MockMailerService_SendVerifyEmail_Call{Call: _e.mock.On("SendVerifyEmail", lang, email, token, hours)}
}

func (_c *MockMailerService_SendVerifyEmail_Call) Run(run func(lang string, email string, token string, hours int)) *MockMailerService_SendVerifyEmail_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 string
		if args[0] != nil {
			arg0 = args[0].(string)
		}
		var arg1 string
		if args[1] != nil {
			arg1 = args[1].(string)
		}
		var arg2 string
		if args[2] != nil {
			arg2 = args[2].(string)
		}
		var arg3 int
		if args[3] != nil {
			arg3 = args[3].(int)
		}
		run(
			arg0,
			arg1,
			arg2,
			arg3,
		)
	})
	return _c
}

func (_c *MockMailerService_SendVerifyEmail_Call) Return(err error) *MockMailerService_SendVerifyEmail_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockMailerService_SendVerifyEmail_Call) RunAndReturn(run func(lang string, email string, token string, hours int) error) *MockMailerService_SendVerifyEmail_Call {
	_c.Call.Return(run)
	return _c
}
